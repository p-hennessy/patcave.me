<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>The Patcave</title>
    <link href="https://ns-phennessy.github.io/patcave.me/feed.xml" rel="self" />
    <link href="https://ns-phennessy.github.io/patcave.me" />
    <updated>2022-01-25T15:18:26-07:00</updated>
    <author>
        <name>Patrick Hennessy</name>
    </author>
    <id>https://ns-phennessy.github.io/patcave.me</id>

    <entry>
        <title>Automate All The Things!</title>
        <author>
            <name>Patrick Hennessy</name>
        </author>
        <link href="https://ns-phennessy.github.io/patcave.me/automate-all-the-things/"/>
        <id>https://ns-phennessy.github.io/patcave.me/automate-all-the-things/</id>

        <updated>2022-01-25T14:13:54-07:00</updated>
            <summary>
                <![CDATA[
                    I have this hobby where I basically take things that I spend a lot of time with and use my coding skills to try to automate things as much as I can. I originally started programming and doing computer stuff way back in 2009; the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>I have this hobby where I basically take things that I spend a lot of time with and use my coding skills to try to automate things as much as I can.</p>
<hr>
<h2>How did I start doing this?</h2>
<p>I originally started programming and doing computer stuff way back in 2009; the end of high school. I had played a lot of Diablo II at the time; and in that game, to be 'godly' you needed to get a lot of high tier items. Doing that was a <em>super </em>grind.<br><br>I had done a few things to try to "strike it rich". What I finally realized is that the botter's<br>had it right. Automate the boring stuff and focus on what you want to do. And that's what I did!<br><br>I downloaded the <a href="https://www.projectetal.com/forums/" target="_blank" rel="noopener noreferrer">D2NT </a>bot and started picking it apart. I didn't know anything about programming or software really. I watched a few tutorials on the basics of Javascript (the embedded language the bot used to control it's actions). I didn't really understand the impact of changes I made so I made a LOT of mistakes and was forced to learn how the rest of it worked. This is where I learned to debug code as well; since most of what was there was code I personally didn't write.<br><br>I did a bunch of mini projects with this botting software. One of them was a rush bot; that basically (100% automatically) went through all the quests in the game for a low level character; something that used to be very manual and time consuming. This meant I could offer it as a service and actually scale it out.</p>
<hr>
<h2>Everyone should be doing this!</h2>
<p>It feels sooo good when you complete a project like that and it makes it so you almost don't have to do anything. Not only that; but even with something small like that; I learned a TON about how computers worked. I feel very strongly that the best way to learn CS is to partake in small but not dumb projects; make it something you actually care about and can have something tangible that you use after you're done. Something you personally would actually want to use.</p>
<p>I have continued doing this ever since. So lets talk about my latest venture...</p>
<hr>
<h1 id="my-team-fortress-2-server-automation-project">Team Fortress 2 server automation project</h1>
<figure class="post__image"><img loading="lazy"  src="https://ns-phennessy.github.io/patcave.me/media/posts/1/tf2_solly.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2_solly-xs.png 300w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2_solly-sm.png 480w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2_solly-md.png 768w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2_solly-lg.png 1024w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2_solly-xl.png 1360w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2_solly-2xl.png 1600w"  alt="" width="1024" height="512"></figure>
<p>Easily my favorite game of all time is <a href="http://www.teamfortress.com/">Team Fortress 2</a>, I love this game so much, I could probably write an entire book on what TF2 does right.</p>
<p>So I have all these computer skills now; and one of the awesome things about Valve is they allow you to run your own servers! Not only that but there is a deep history of people modding the source engine for various things. Infact Valve literally released an <a href="https://github.com/ValveSoftware/source-sdk-2013">SDK</a> that exposes a lot of power to modders.</p>
<p>There's no way I'm not using my computer skills to make all of this stuff awesome. Basically this project is solving the problem that; I want as close to a self service competitive TF2 server than I can get.</p>
<p>Just for some context; I play on multiple competitive teams, and servers are CONSTANT pain for teams. I tried the "cheap" hosting solutions that most people do; I was super unhappy with what I got.</p>
<hr>
<h3>What problems am I solving and how?</h3>
<p><strong>Problem</strong>: Getting a "configured" server from a hosting provider is expensive and clunky</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>Run servers in your own cloud!</li>
<li>Have all the custom maps and plugins needed preloaded on the server, no extra configuring required</li>
</ul>
<p> </p>
<p><strong>Problem</strong>: Running servers 24/7 is expensive and unnecessary</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>Make it easy for users to provision servers on an ad-hoc basis</li>
<li>We still want people to be able to have a server when they need it</li>
<li>Servers will shut themselves down when no longer in use.</li>
<li>Installing monitoring software to optimize hardware and actual usage</li>
</ul>
<p> </p>
<p><strong>Problem</strong>: Configuring servers is slow; even when automated</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>Do this once and be able to deploy a LOT of identically configured systems</li>
<li>Follow the idea of a baked image</li>
<li>Allow server to come up with a few dynamic details (passwords, hostname, etc)</li>
</ul>
<p> </p>
<p><strong>Problem</strong>: Sometimes multiple people want a server at the same time</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>The ability to ask for servers ad-hoc means that I can host many servers at once and it would still be cheaper than running a single server 24/7 so long as they don't run ALL the time</li>
<li>Allow users to self service. Give them a simple menu to set the map, config, and item whitelist</li>
</ul>
<p> </p>
<p><strong>Problem</strong>: Players like to understand their in-game performance</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>Record and upload player stats and game recordings to known sites (<a href="http://demos.tf/">Demos.tf</a> &amp; <a href="http://logs.tf/">Logs.tf</a>)</li>
<li>Some leagues also <em>require</em> recordings, so this makes it certain you will have a high quality copy of the match</li>
</ul>
<p> </p>
<p><strong>Problem</strong>: Servers get hacked or DDoS'd</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>Do basic sever hardening (no ssh access, lock down source process, use random passwords, etc)</li>
<li>Put it in a network that has a high degree of fault tolerance</li>
<li>Put up stateful firewalls to block script kiddies</li>
<li>Set up kernel flags to mitigate common DoS attacks</li>
<li>Monitoring system should alert when events like this happen</li>
<li>Be able to just make a new server so now the hacker has to find all that info again</li>
</ul>
<p> </p>
<p><strong>Problem</strong>: Writing web UI's is time consuming and requires users to go a website</p>
<p><strong>Solution</strong>:</p>
<ul>
<li>Integrate with chat services (Discord) or be where players congregate the most</li>
<li>Basically, bring the solution to where users already are</li>
</ul>
<hr>
<h3>Result</h3>
<p>What I have now is the ability to summon a fully configured Team Fortress 2 server that I don't even need to be around to allow games to happen on.</p>
<h4 id="ansible">Ansible</h4>
<p>Basically I'm creating bootable images that can be turned into VM's very quickly. This uses a tool I already know from working as a System Administrator; <a href="https://www.ansible.com/">Ansible</a>. Using this technique makes it so I can boot a virtual machine get a working TF2 in ~2 minutes; which is remarkably fast, plus most users are quite happy to wait if it means a well configured high performance server they can frag on. These servers are setup to gracefully shutdown when no one is using it anymore.</p>
<p><em>Source code</em>: <a href="https://github.com/scrims-tf/provisioners">scrims-tf/provisioners</a></p>
<p> </p>
<h4 id="discord-bot-integration">Discord Bot integration</h4>
<p>I go a step further to enabling my Discord bot to respond to requests for a server. Not only that but it will give the user very useful information about the server and how to use it. Putting the docs right in front of them. Of course I'm using my own <a href="https://github.com/ns-phennessy/Arcbot">Discord bot library</a> for this.</p>
<figure class="post__image"><img loading="lazy"  src="https://ns-phennessy.github.io/patcave.me/media/posts/1/serveme-2.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/serveme-2-xs.png 300w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/serveme-2-sm.png 480w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/serveme-2-md.png 768w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/serveme-2-lg.png 1024w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/serveme-2-xl.png 1360w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/serveme-2-2xl.png 1600w"  alt="" width="979" height="490"></figure>
<p><em>Source code</em>: <a href="https://github.com/scrims-tf/discord-bot-plugins">scrims-tf/discord-bot-plugins</a></p>
<p> </p>
<h4 id="monitoring">Monitoring</h4>
<p>Not only <em>that</em>; but it also automatically sends data to my <a href="https://www.influxdata.com/time-series-platform/">monitoring stack</a></p>
<figure class="post__image"><img loading="lazy"  src="https://ns-phennessy.github.io/patcave.me/media/posts/1/tf2mon.png" sizes="(max-width: 48em) 100vw, 768px" srcset="https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2mon-xs.png 300w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2mon-sm.png 480w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2mon-md.png 768w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2mon-lg.png 1024w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2mon-xl.png 1360w ,https://ns-phennessy.github.io/patcave.me/media/posts/1/responsive/tf2mon-2xl.png 1600w"  alt="" width="1324" height="683"></figure>
<p>My monitoring stack will send me alerts (also in Discord) when..</p>
<ul>
<li>High player count</li>
<li>High network bandwidth</li>
<li>High CPU / RAM usage</li>
<li>Server is older than a threshold (why is it hanging??)</li>
</ul>
<p>I can now also pull data out of my monitoring to optimize cost or understand how my servers operate.</p>
<p>I also really should automate creating my monitoring...</p>
<p> </p>
<h4 id="supporting-infrastructure">Supporting Infrastructure</h4>
<p>Not only <em>that</em>; but I went even further as to automate the actual network the systems live in. This allowed me to work with a new tool <a href="http://terraform.io/">Terraform</a>. This means that I can make lots of changes to all of this very easily. Basically able to re-create all of this if I want (say if I want to use Google's free trial over and over).</p>
<p><em>Source code</em>: <a href="https://github.com/scrims-tf/infrastructure">scrims-tf/infrastructure</a></p>
<p>I decided to put this on Google's cloud network. Mostly because I wanted to get my hands on and see if my distaste for AWS was because Amazon sucks and is the grass greener on the other side. So far, I've had a very positive experience with GCP, though some features are lacking like VPC-enabled databases. A side effect I didn't expect is that putting it on Google's network has lowered user ping on average for the players of the server. This is because Google has highly optimized their networks to enter their backbone much closer to the player's location; avoid a lot of the suboptimal routing that ISP's do with <a href="https://en.wikipedia.org/wiki/Border_Gateway_Protocol">BGP</a>.</p>
<p> </p>
<h4 id="custom-server-mods">Custom Server Mods</h4>
<p>I've had to also write a handful of mods for the server to allow some of this to happen. I do have to say that I'm thoroughly impressed by the modding community. A group of volunteers have been able to embed a working Python3.6 interpreter into the Source Engine, <strong><em>AND</em></strong> it doesn't suffer from a lot of the slowness usually associated with interpreted languages.</p>
<p><em>Source code</em>: <a href="https://github.com/scrims-tf/sourcemod-plugins">scrims-tf/sourcemod-plugins</a> and <a href="https://github.com/scrims-tf/sourcepython-plugins">scrims-tf/sourcepython-plugins</a></p>
<hr>
<h1 id="future-plans">Future Plans</h1>
<p>Automate more things! I want to play with the idea of extending the player stats logging to include not only more information but way more advanced ability to view that information. Maybe even work with some of my data science friends to derive cool insights. Player progression over time and maybe even something like an <a href="https://dota2.gamepedia.com/Matchmaking_Rating">MMR</a> or try to guess their skill division.</p>
<p>I also want to play with the idea of having the <a href="https://developer.valvesoftware.com/wiki/SourceTV">SourceTV</a> camera directed by machine learning. How awesome would it be to have a computer know and show you where the big moments are. Basically can follow the action in the game so viewers can just sit back and watch as if a crew was doing all of it.</p>
<p>Add some feature to make the "pick up game" (pug) experience better. MMR for players to try to balance teams. Ability to just randomize teams. Ability to have a 2 captains pick players and assign them to teams.</p>
<p>Offer this as a cheap paid service for the Team Fortress community in general. Not sure how much I would charge per month; not looking to get rich or anything; but make my hosting costs into nothing.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>What I learned from making a Python chatbot</title>
        <author>
            <name>Patrick Hennessy</name>
        </author>
        <link href="https://ns-phennessy.github.io/patcave.me/what-i-learned-from-making-a-python-chatbot/"/>
        <id>https://ns-phennessy.github.io/patcave.me/what-i-learned-from-making-a-python-chatbot/</id>

        <updated>2022-01-25T14:48:39-07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://ns-phennessy.github.io/patcave.me/media/posts/2/cover-1.png" alt="" />
                    Intro Lately I've been reading and hearing a lot about Chat Ops. It's a practice started by Github which uses a chat service like Hipchat or Slack with a bot user to provide feedback and insights into their infrastructure. This is super cool because it allows for transparency in to&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://ns-phennessy.github.io/patcave.me/media/posts/2/cover-1.png" alt="" />
                <h2 dir="auto">Intro</h2>
<p dir="auto">Lately I've been reading and hearing a lot about <a href="https://www.pagerduty.com/blog/what-is-chatops/" rel="nofollow">Chat Ops</a>. It's a practice started by Github which uses a chat service like <em>Hipchat</em> or <em>Slack</em> with a bot user to provide feedback and insights into their infrastructure.</p>
<p dir="auto">This is super cool because it allows for transparency in to what you're doing at any given time. Very useful in a high stress situation, like a big production failure where multiple engineers are trying to fix it; they can easily coordinate their efforts and not have to tell everyone what they're doing right that second because everyone can see it.</p>
<p dir="auto"> </p>
<h2 dir="auto">Motivations</h2>
<p dir="auto">When I was younger, I played in the early days of <strong>Starcraft 1</strong> and <strong>Diablo II</strong>. To play online; you had an IRC like client called Battle.Net, and there were bots galore. Thanks to our collective knowledge; the clan I was in at the time, we became the top clan in Diablo. One of the services we ran was a trivia bot, which is half the reason people came to our channel. The other was the exp runs they could get from it.</p>
<p dir="auto">Ever since getting on these modern chat services, I wanted a bot that I built entirely on my own. So my initial idea was to build a trivia bot. It used webhooks; and I did everything synchronously with some simple HTTP-server library. It worked; but was far from an ideal implementation.</p>
<p dir="auto">But I did have an awesome name for it: <em><strong>Regis Philbot</strong></em>, after the infamous Who Want's to be a Millionaire host; so of course I wanted to make the bot as cool as the name.</p>
<p dir="auto"> </p>
<h2 dir="auto">The first iteration</h2>
<p dir="auto">While there were many bots already out there; I wanted the challenge of building it myself from scratch. I made the decision to use Python, which I was still sort of new to at the time (but so glad I did).</p>
<p dir="auto">My initial design was poor; not thought out at all. I guess I just wanted to see if I could even get it to work at all. I did get it working; but it was very buggy and unstable.</p>
<p dir="auto">I had started using <a href="http://discordapp.com/" rel="nofollow">Discord</a> chat / voice service for some of my gaming friends and I, and I wanted to get a bot in there to have fun with. So started rewriting the bot from scratch and began the process of reverse engineering the Discord API. (This was fairly easy since Discord is a web based client)</p>
<p dir="auto"> </p>
<h2 dir="auto">Super Object Oriented Python Master Race</h2>
<p dir="auto">I didn't have the whole design in my head when I started; but my goal was to create a simple to use API for plugins, so that you can write a plugin that does stuff. To facilitate this; I started with a <code>Core</code> object.</p>
<h3 dir="auto">Core</h3>
<p dir="auto">In <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" rel="nofollow">object oriented programming</a> terms, the <code>Core</code> uses <em>composition</em>. So then the question is; what things should the core allow us to do?</p>
<p dir="auto">Heres what I came up with:</p>
<ul dir="auto">
<li>Connect / Disconnect to chat service</li>
<li>Manage the Bot config</li>
<li>Handle plugins</li>
<li>Broker events</li>
</ul>
<h3 dir="auto">Connector</h3>
<p dir="auto">The connector class is the bot's interface to the chat service; in this case, I was using <a href="https://discordapp.com/" rel="nofollow">Discord</a>.</p>
<p dir="auto">This class was a good opportunity to use an <strong><a href="https://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)" rel="nofollow">interface</a></strong>. So then we ask; what does the bot need to be able to do with the chat service? What things are common operations among all modern chat services?</p>
<p dir="auto">I created a number of methods to abstract this:</p>
<div class="highlight highlight-source-python position-relative overflow-auto">
<pre><span class="pl-s1">connector</span>.<span class="pl-en">say</span>()                 <span class="pl-c"># Says something in a chat channel</span>
<span class="pl-s1">connector</span>.<span class="pl-en">reply</span>()               <span class="pl-c"># Replies to a user who invoked a command</span>
<span class="pl-s1">connector</span>.<span class="pl-en">whisper</span>()             <span class="pl-c"># Uses private messaging with the user</span>
<span class="pl-s1">connector</span>.<span class="pl-en">getUser</span>()             <span class="pl-c"># Get data about a specific user</span>
<span class="pl-s1">connector</span>.<span class="pl-en">getChannel</span>()          <span class="pl-c"># Get data about a particular channel</span>
<span class="pl-s1">connector</span>.<span class="pl-en">upload</span>()              <span class="pl-c"># Upload a file to the server</span></pre>
</div>
<p dir="auto">The tricky part was going to be how I could make the bot <em>recieve</em> messages as well. This ended up being a <a href="https://docs.python.org/3.5/library/threading.html" rel="nofollow">thread</a> that just listens on a <a href="https://docs.python.org/3.5/library/socket.html" rel="nofollow">socket</a> for new messages.</p>
<p dir="auto">It was at this point I started hitting a lot of problems with the socket; websocket; and requests libraries. It got really wonky trying to use <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" rel="nofollow">SSL</a> in Python 2.7, so I was forced to upgrade to Python 3.</p>
<p dir="auto">So now this <em>""message consumer""</em> thread would need to actually produce messages in a way the bot can understand and notify the bot that it has received a message. The first iteration of the system was poor; and it was already showing performance issues since this one thread was literally doing all the bot logic. <strong>Bad bad bad</strong></p>
<h3 dir="auto">Going Multi threaded</h3>
<p dir="auto">I has read that you can get considerable performance gains by using <a href="https://en.wikipedia.org/wiki/Thread_pool" rel="nofollow">thread pooling</a>. I could get away with this since I don't have to ensure that the bot does things in a 100% FIFO manner. I also thought that; what if a plugin is waiting on an HTTP response from an API? In a single threaded system; he would just be sitting there and no one could interact with it until that request returned. A bot isn't a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow">REPL</a> interface per-say.</p>
<p dir="auto">So now I had to make a class to handle my pool of threads; and I had <em>never</em> done any meaningful threaded programming before this.</p>
<p dir="auto">Python makes this stupidly simple, it has a FIFO queue library that blocks when dequeueing an item. This just means that more than one thread can't take something from the queue at the same time as another. So then it was just as simple as creating a generic <code>worker</code> class that would run any function you give it. Python even makes this easy because functions are <a href="https://en.wikipedia.org/wiki/First-class_function" rel="nofollow">first class citizens.</a></p>
<p dir="auto">Awesome! I just learned a lot about threading and how the OS handles blocking; plus now my bot can be working on many things at once.</p>
<h3 dir="auto">Plugin System</h3>
<p dir="auto">This is where things got super <em>""meta""</em>.</p>
<p dir="auto">I wanted to be able to 'sandbox' plugins from each other; and be able to unload them. Once again, Python allows you do some cool things like dynamically linking code modules at runtime.</p>
<p dir="auto">I needed a way to manage these plugins. This led to me making a bunch of classes.</p>
<ul dir="auto">
<li>Plugin Superclass</li>
<li>Plugin Manager</li>
<li>Command Manager</li>
<li>Event Manager</li>
<li>Decorators (Oh god no)</li>
</ul>
<p dir="auto">So obviously; the Plugin manager is what handles the plugins themselves; Loading, unloading, and tracking their loaded instances.</p>
<p dir="auto">Python has this thing called <em>metaprogramming</em>; which allows you to mess with parts of methods and classes. Under the hood; everything is just a <code>dict</code> object. You can abuse this by piggy backing on it to pass information around.</p>
<p dir="auto">This is when I wrote my first decorator. What it does it set flags on a method to say that it is a command; and here is how it is invoked. I could now abstract this from the plugin so the manager could know that this is intended to be a command.</p>
<p dir="auto">Theres a problem that happens tho; if you hit an exception in a plugin; that threaded worker is now dead. Shit.</p>
<p dir="auto">So I had to make it so the workers would throw the exception but keep going.</p>
<p dir="auto"> </p>
<h2 dir="auto">Tying everything together</h2>
<p dir="auto">The glue that makes the bot work really lies in the <code>message consumer</code> thread; which resides in the connector. When it encounters a message from the socket; it queue's up for a threaded worker to pick up, and this worker will check to see if this message is something the bot should respond to.</p>
<h3 dir="auto">Gravy features</h3>
<p dir="auto">Getting the core functionality done felt pretty good. The plugin syntax was simple and everything worked very well together; but I felt very limited in what my plugin could do.</p>
<h4 dir="auto">Persistance</h4>
<p dir="auto">This was a tough one; I figured I wanted to use an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping" rel="nofollow">ORM</a>, which basically allows you to use SQL as if it were Python code.</p>
<p dir="auto">The elephant in the room is <a href="http://www.sqlalchemy.org/" rel="nofollow">SQL Alchemy</a>, being that it is the most popular standalone ORM for Python. When I investigated it; I found it very clunky and really didn't like it. I considered a few other options until stumbling on <a href="http://docs.peewee-orm.com/en/latest/" rel="nofollow">PeeWee</a>; which is an extremely lightweight ORM. It had everything I needed without all the fluff.</p>
<p dir="auto">I abstracted it out a bit; plugins getting their own database file; as well as automatically setting up the database tables and a key value store for them behind the scenes. The less plugin code I have to write; the better.</p>
<h4 dir="auto">Access Control</h4>
<p dir="auto">This depended on persistence obviously; but I quickly found it tedious to have people being able to run any command on my bot. There was no way to restrict who could do what.</p>
<p dir="auto">I setup ACL's so that each user gets an 'access' rank, -1 to 999. You then specify in your plugins how much access is required to use a particular command. So now I have a <code>banhammer</code> command; which only I can use.</p>
<p dir="auto"> </p>
<h2 dir="auto">Challenges</h2>
<p dir="auto">There were a lot of gotchas that I fell into; and looks like a lot of Python programmers fall victim to them as well.</p>
<p dir="auto">I had to do some digging; but it turns out that Python's <code>thread</code> library is deprecated, and you're supposed to use the <code>threading</code> library instead. Super confusing.</p>
<p dir="auto">I had the same problem with the websocket library too though; there is a socket library, and several unofficial websocket libraries. The ones I looked at couldn't connect to my Slack server, and they were really clunky to use; but I found someone who was making something similar use a obscure websocket library which works extremely well. (Thank god)</p>
<p dir="auto"> </p>
<h2 dir="auto">What I learned</h2>
<p dir="auto">Overall; it has been a good experience. It caused me to touch many many aspects of Python; and get experience with using all these features together.</p>
<p dir="auto">The thread pool class had me dig into Python's <code>threading</code> library. I learned about the best practices for starting, managing and stopping threads; as well as design considerations.</p>
<p dir="auto">The other classes were more for organization and sanity; but I learned about <a href="http://www.secnetix.de/olli/Python/list_comprehensions.hawk" rel="nofollow">list comprehension</a> as well as iterators and iterables. Though I prefer using more explicit code for doing list operations.</p>
<p dir="auto">I also found out that there is official support for Java-like class declarations. You can create an abstract class, define getters and setters, method overloading, calling the super constructor, etc. Though in Python, it looks very odd in my opinion.</p>
<p dir="auto">My pub/sub system for events allowed me to learn about how functions/methods are treated on the same level as an <code>int</code>, and that there is a buttload of meta classes attached to each function callback, which can tell me things about it. I also played with decorators quite a bit. An interesting little syntactic sugar for Python; I thought it could simplify my plugin system even further, however I couldn't quite figure out how to make it work how I wanted it.</p>
<p dir="auto">When implementing my <code>help</code> command in my basic chat plugin; I learned about the <code>__docstring__</code> meta tag, so I could have my code documented in line. Fantastic.</p>
<p dir="auto"> </p>
<h2 dir="auto">In Summation...</h2>
<p dir="auto">For anyone who doesn't do random hacking projects like this; I highly recommend it. I touched quite a bit of Python's breadth and learned a hell of a lot about how everything works in the language.</p>
<p dir="auto">Most of all, the bot works! Sure, it's not perfect, there are some tweaks that it still needs; like more error handling, edge-case things, etc. But at this point; I would consider it stable enough to run it on my Discord server.","</p>
<p dir="auto">Lately I've been reading and hearing a lot about Chat Ops. It's essentially a DevOp's practice started by <strong>Github</strong> which uses a chat service like <em>Hipchat</em> or <em>Slack</em> with a bot user to manage their team and infrastructure.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Setting up a secure Linux Server</title>
        <author>
            <name>Patrick Hennessy</name>
        </author>
        <link href="https://ns-phennessy.github.io/patcave.me/setting-up-a-secure-linux-server/"/>
        <id>https://ns-phennessy.github.io/patcave.me/setting-up-a-secure-linux-server/</id>

        <updated>2022-01-25T15:18:26-07:00</updated>
            <summary>
                <![CDATA[
                    Overview This is not a comprehensive guide; but should get you started and prevent you from getting pwned immediately. Following these small steps will make you a much harder target to compromise, and are probably not worth most hackers time. There are a lot of&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 dir="auto">Overview</h2>
<p dir="auto">This is not a comprehensive guide; but should get you started and prevent you from getting pwned immediately.</p>
<p dir="auto">Following these small steps will make you a much harder target to compromise, and are probably not worth most hackers time.</p>
<p dir="auto">There are a lot of automated attacks going around and hitting known server cluster IP ranges looking for low hanging fruit and vulnerable servers they can exploit.</p>
<hr>
<h2 dir="auto">Creating a Droplet</h2>
<p dir="auto">DigitalOcean makes it very simple to create a droplet. Once you have an account, create a droplet</p>
<ul dir="auto">
<li><strong>Name</strong>: Name your droplet whatever you want. This will become the <strong>hostname</strong> on the machine itself once it's created.</li>
<li><strong>Size</strong>: Go for the cheapest one. The most it will charge you is $5 / month (a very good deal imo).</li>
<li><strong>Location</strong>: I've found that the New York location is rather slow for me, so I usually opt for the San Francisco location.</li>
<li><strong>Image</strong>: Most people will be comfortable with Ubuntu; so we will select that.</li>
</ul>
<p dir="auto">Also important to note; you should opt for using <a href="https://wiki.ubuntu.com/LTS" rel="nofollow">LTS</a> releases since they're supported for a while.</p>
<hr>
<h2 dir="auto">Login</h2>
<p dir="auto">Once created; DigitalOcean will e-mail you your new login credentials.</p>
<h3 dir="auto">From a Terminal (OSX or Linux)</h3>
<p dir="auto">Open a terminal window and type in the following command:</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>ssh root@ipaddress</pre>
</div>
<p dir="auto">It will prompt for a password; enter the one sent to your email.</p>
<h3 dir="auto">From Putty (Windows)</h3>
<p dir="auto">Download <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html" rel="nofollow">PuTTy</a> if you don't have it already. PuTTy will simulate a terminal session similar to that on a Linux or OSX system.</p>
<p dir="auto">Put in the supplied ip-address in the <code>hostname</code> field, and leave the port on <code>22</code>. Then click connect.</p>
<p dir="auto">You will be prompted for your password; feel free to copy and paste it from the email directly. If you did everything right; you should now be logged into your DigitalOcean node as the root user!</p>
<hr>
<h2 dir="auto">Installing Updates</h2>
<p dir="auto">The first thing you should do is bring all your software up to date.</p>
<p dir="auto">DigitalOcean does pretty well keeping their images up to date; but you want to get in the habit of having the freshest updates to software on your system.</p>
<p dir="auto">Use the following commands:</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>apt-get update
apt-get upgrade</pre>
</div>
<p dir="auto"><strong>update</strong> will hit all the <a href="https://help.ubuntu.com/community/Repositories/Ubuntu" rel="nofollow">Ubuntu repositories</a> and refresh any package names or versions.</p>
<p dir="auto"><strong>upgrade</strong> will upgrade any out of date packages and remove anything that is now unnecessary on your system.</p>
<hr>
<h2 dir="auto">Disabling Root Access</h2>
<p dir="auto">It's a good idea to disable root user logins via SSH. Root is allowed to do literally anything on a system, so it's a dangerous account.</p>
<hr>
<h2 dir="auto">Add an admin (sudo) account</h2>
<p dir="auto">A <strong>sudo</strong> user is a user on a Linux system who as the ability to perform certain root-level operations after a password prompt. <em>You should only give <code>sudo</code> access to users who absolutely need it.</em></p>
<p dir="auto">Use the following command to add a new sudoer:</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>useradd -g sudo -s /bin/bash pat</pre>
</div>
<p dir="auto">It will prompt you for a password and email; put whatever you like there (it can be changed later if desired).</p>
<p dir="auto">Once done; I would <em><strong>highly</strong></em> recommend starting another terminal or PuTTy session and logging in as this user to verify that you're able to login. The last thing you want is to lock yourself out.</p>
<h3 dir="auto">Disable Root Login over SSH</h3>
<p dir="auto">Next you'll need to stop the root user from logging in at all.</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>vim /etc/ssh/sshd_config</pre>
</div>
<p dir="auto">Look for a line that says <code>PermitRootLogin</code> and set it to <code>no</code></p>
<p dir="auto">Then reset the SSH server:</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>systemctl restart sshd</pre>
</div>
<hr>
<h2 dir="auto">Firewall</h2>
<p dir="auto">Another important thing to do is to stop automated port scanning attacks on your server. At the moment, we are only using a single port for our communications, <em>22</em> for SSH. A <a href="http://en.wikipedia.org/wiki/Firewall_%28computing%29" rel="nofollow">firewall</a> can stop other hosts from connecting to those ports, hogging up system resources, and potentially exploiting unknown vulnerabilities.</p>
<p dir="auto">You should tune the rules to your liking, but heres a good <a href="https://gist.github.com/ns-phennessy/5a3b60e41022748f5f68">boilerplate</a> to start from</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>wget https://gist.githubusercontent.com/ns-phennessy/5a3b60e41022748f5f68/raw/e9e96a793dd5668b8568a437e083594318a41c86/Firewall%20Script
chmod +x Firewall<span class="pl-cce">\ </span>Script
sudo bash Firewall<span class="pl-cce">\ </span>Script</pre>
</div>
<p dir="auto">The script will setup sensible defaults and leave port 22 open. <strong>IT IS VERY IMPORTANT TO NEVER CLOSE PORT 22</strong>. You <em>will</em> lock yourself out of your system if you do this.</p>
<hr>
<h2 dir="auto">Fail2Ban</h2>
<p dir="auto"><a href="http://en.wikipedia.org/wiki/Fail2ban" rel="nofollow">Fail2Ban</a> is a <a href="http://en.wikipedia.org/wiki/Daemon_%28computing%29" rel="nofollow">daemon</a> that follows the authentication log and see if any IP address has too many failed login attempts, and temporarily bans them.</p>
<p dir="auto">Install it and setup default config:</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>sudo apt-get install fail2ban
sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</pre>
</div>
<p dir="auto">You can now go and tweak your jail settings.</p>
<div class="highlight highlight-source-shell position-relative overflow-auto">
<pre>sudo vim /etc/fail2ban/jail.local</pre>
</div>
<p dir="auto">I like to set my <code>bantime</code> ridiculously high but give myself a <code>maxretry</code> of at least 5 over a <code>findtime</code> of about 10 minutes.</p>
<p dir="auto">Remember that the goal is to catch brute force attacks, you need to be aware that your rules will have to reflect the kind of traffic you're seeing. A smart attacker will brute force your system slowly to avoid getting caught up in filters like this one.</p>
<hr>
<h2 dir="auto">Done!</h2>
<p dir="auto">Congrats, you're setup and had your first taste with server security. Hopefully this article has given you some insight into how to setup and maintain a Linux server and not get immediately hacked</p>
            ]]>
        </content>
    </entry>
</feed>
